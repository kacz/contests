import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.SortedSet;
import java.util.TreeSet;


public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		if(args.length > 0) {
			try {
				System.setIn(new FileInputStream("/home/kacz/hack/input"));
				System.setOut(new PrintStream(new FileOutputStream("/home/kacz/hack/output")));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		in.nextLine();
		for (int c = 1; c <= t; c++) {
			solve(in,System.out,c);
			
		}

	}

	public static void solve(Scanner in, PrintStream out,int iteration) {
		
		long n = in.nextLong();
		long k = in.nextLong();
		long a = in.nextLong();
		long b = in.nextLong();
		long c = in.nextLong();
		long r = in.nextLong();
	
		SortedSet<Long> freeelems = new TreeSet<Long>();
		Map<Long,Long> usedelems = new HashMap<Long,Long>();
		for(long i = 0; i < k; ++i) {
			freeelems.add(i);
		}
	
		freeelems.remove(a);
		usedelems.put(a, 1L);
		 
		long last = a;
//		out.print(a+" ");
		for(long i = 1; i < k; ++i ) {
			long next = (b*last+c)%r;
			freeelems.remove(next);
			if(usedelems.containsKey(next)) {
				usedelems.put(next, usedelems.get(next)+1);
			}else {
				usedelems.put(next, 1L);
			}
			
			last = next;
//			out.print(next+" ");
		}
		last = a;
		long min = 0;
		long index = ((n-k)%(k+1) == 0 ? k+1 : (n-k)%(k+1));
		for(long i = 0; i < index; ++i) {
			min = freeelems.first();
//			out.print(min+" ");
			freeelems.remove(min);
			if(usedelems.get(last) == 1) {
				freeelems.add(last);
				usedelems.remove(last);
			} else {
				usedelems.put(last, usedelems.get(last) -1);
			}
			
			last = (b*last+c)%r;
		}
//		out.println();
		out.printf("Case #%d: %d%n", iteration, min);
	}
	
}
